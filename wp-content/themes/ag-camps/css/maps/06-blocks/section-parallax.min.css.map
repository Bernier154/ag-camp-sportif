{"version":3,"sources":["06-blocks/section-parallax.scss","01-config/_mixins.scss"],"names":[],"mappings":"AAGA,0BACI,iBAAkB,CADtB,iCAIQ,YAAa,CCuBpB,yCD3BD,iCAOY,YAAa,CAUpB,CCUJ,yCD3BD,qCAYgB,UAAW,CACX,WAAY,CACZ,mBAAiB,CAAjB,gBAAiB,CAExB,CAhBT,4CAoBQ,iBAAkB,CAClB,OAAQ,CACR,MAAO,CACP,OAAQ,CACR,kCAA2B,CAA3B,0BAA2B,CAC3B,iBAAkB,CAClB,SAAU,CACV,UAAW,CA3BnB,+CA8BY,QAAS,CACT,eAAgB,CAChB,uCAAyC,CAhCrD,qDAmCgB,YAAa,CAnC7B,sDAuCgB,eAAgB,CAvChC,2DA4CY,eAAgB","file":"../../06-blocks/section-parallax.min.css","sourcesContent":["@import '../01-config/var';\r\n@import '../01-config/mixins';\r\n\r\n.section-parallax-wrapper{\r\n    position: relative;\r\n\r\n    figure{\r\n        height: 500px;\r\n\r\n        @include media-screen($bk_mobile){\r\n            height: 400px;\r\n        }\r\n\r\n        img{\r\n            @include media-screen($bk_mobile){\r\n                width: 100%;\r\n                height: 100%;\r\n                object-fit: cover;\r\n            }\r\n        }\r\n    }\r\n\r\n    .content-on-image{\r\n        position: absolute;\r\n        top: 50%;\r\n        left: 0;\r\n        right: 0;\r\n        transform: translateY(-50%);\r\n        text-align: center;\r\n        z-index: 5;\r\n        color: #fff;\r\n\r\n        h2{\r\n            margin: 0;\r\n            font-weight: 300;\r\n            text-shadow: 2px 2px 8px rgba(0,0,0,0.25);\r\n\r\n            &:after{\r\n                display: none;\r\n            }\r\n\r\n            strong{\r\n                font-weight: 600;\r\n            }\r\n        }\r\n\r\n        .arrow-wrapper{\r\n            margin-top: 60px;\r\n        }\r\n    }\r\n}","// centre un block\r\n@mixin center-block {\r\n\tdisplay: block;\r\n\tmargin-left: auto;\r\n\tmargin-right: auto;\r\n}\r\n\r\n// Ajoute le clearfix\r\n@mixin clearfix() {\r\n\tcontent: \"\";\r\n\tdisplay: table;\r\n\ttable-layout: fixed;\r\n}\r\n\r\n// Clear after (not all clearfix need this also)\r\n@mixin clearfix-after() {\r\n\tclear: both;\r\n}\r\n\r\n// Le width de la colonne avec la marge\r\n@mixin column-width($numberColumns: 3) {\r\n\twidth: map-get( $columns, $numberColumns ) - ( ( $columns__margin * ( $numberColumns - 1 ) ) / $numberColumns );\r\n}\r\n\r\n\r\n/// Retourne un media query avec la largeur donnée\r\n/// \r\n/// @param {String} $width [76.8em]\r\n/// @param {String} $minMax [min]\r\n@mixin media-screen($width: 76.8em, $minMax: max){\r\n\t@media only screen and (#{$minMax}-width: $width) {\r\n\t\t@content;\r\n\t}\r\n}\r\n\r\n\r\n/// Permet d’appliquer un mixin au root autant que sous un autre sélecteur\r\n/// require SASS 3.4\r\n@mixin optional-at-root($sel) {\r\n  @at-root #{if(not &, $sel, selector-append(&, $sel))} {\r\n    @content;\r\n  }\r\n}\r\n\r\n// Permet de styler les placeholder. Peut être \r\n@mixin placeholder {\r\n  @include optional-at-root('::-webkit-input-placeholder') {\r\n    @content;\r\n  }\r\n\r\n  @include optional-at-root(':-moz-placeholder') {\r\n    @content;\r\n  }\r\n\r\n  @include optional-at-root('::-moz-placeholder') {\r\n    @content;\r\n  }\r\n\r\n  @include optional-at-root(':-ms-input-placeholder') {\r\n    @content;\r\n  }\r\n}\r\n\r\n/// Fait en sorte que le texte ait une grosseur fluide avec la largeur de l'écran.\r\n/// Fonctionne seulement avec la même unité (px, em)\r\n///\r\n///\r\n@mixin fluid-typo($min-vw, $max-vw, $min-font-size, $max-font-size) {\r\n  $u1: unit($min-vw);\r\n  $u2: unit($max-vw);\r\n  $u3: unit($min-font-size);\r\n  $u4: unit($max-font-size);\r\n\r\n  @if $u1 == $u2 and $u1 == $u3 and $u1 == $u4 {\r\n    & {\r\n      font-size: $min-font-size;\r\n\r\n      @media screen and (min-width: $min-vw) {\r\n        font-size: calc(#{$min-font-size} + #{strip-unit($max-font-size - $min-font-size)} * ((100vw - #{$min-vw}) / #{strip-unit($max-vw - $min-vw)}));\r\n      }\r\n\r\n      @media screen and (min-width: $max-vw) {\r\n        font-size: $max-font-size;\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\n/// Retire l'unité (px, em, rem, etc.) d'une valeur.\r\n@function strip-unit($value) {\r\n  @return $value / ($value * 0 + 1);\r\n}\r\n\r\n/// Permet de définir le texte\r\n/// @param {float} $size la taille de la police\r\n/// @param {float} $weight le gras\r\n/// @param {float} $color la couleur\r\n/// @param {float} $line-height-PS le line-height valeur dans Photshop\r\n/// @param {bool} $uppercase si true le text sera en majuscule\r\n/// @param {float} $letter-spacing-PS le letter-spacing valeur photshop\r\n@mixin define-text($size:false,$weight:false,$color:false,$line-height-PS:false,$uppercase:false,$letter-spacing-PS:false){\r\n\t@if $size { font-size: $size; }\r\n\t@if $weight {font-weight: $weight;}\r\n\t@if $color {color:$color;}\r\n\t@if $line-height-PS {line-height: $line-height-PS ;}\r\n\t@if $uppercase {text-transform: uppercase;}\r\n\t@if $letter-spacing-PS {letter-spacing:($letter-spacing-PS / 1000)+em;}\r\n}\r\n\r\n/// Applique l'équivalent de object fit responsive même sur ie\r\n/// @param {float} $height la hauteur du figure\r\n\r\n@mixin responsive-image-object-fit($height){\r\n    height: $height;\r\n    overflow: hidden;\r\n    position: relative;\r\n \r\n    img{\r\n        width: auto;\r\n        height: auto;\r\n        min-width: 100%;\r\n        min-height: 100%;\r\n        position: absolute;\r\n        right: 50%;\r\n        transform: translate(50%, 0);\r\n        max-width: none;\r\n        left:auto;\r\n    }\r\n}\r\n\r\n/// ajoute le bon line-height\r\n/// @param {Float} $ps-line-height line height dans Photoshop\r\n/// @param {Float} $font-size font-size en px \r\n@mixin line-height($ps-line-height,$font-size){\r\n\tline-height: $ps-line-height / $font-size;\r\n}\r\n\r\n/// ajoute le bon letter-spacing\r\n/// @param {Float} $ps-letter-spacing line height dans Photoshop\r\n@mixin letter-spacing($ps-letter-spacing){\r\n\tletter-spacing: ($ps-letter-spacing / 1000)+ em;\r\n}\r\n\r\n/// crée un overlay\r\n/// @param {Float} $opacity opaciter de l'overlay\r\n@mixin overlay($opacity,$default_secondary_color){\r\n\tposition: relative;\r\n\t&:after{\r\n\t\tcontent:\"\";\r\n\t\tposition:absolute;\r\n\t\twidth: 100%;\r\n\t\theight: 100%;\r\n\t\tbackground-color:$default_secondary_color;\r\n\t\topacity:$opacity;\r\n\t\ttop:0;\r\n\t\tleft:0;\r\n\t}\r\n}\r\n\r\n\r\n/// mixin pour ajouter un effet de hover\r\n/// @param {Float} $color la couleur de hover\r\n@mixin hover-text($color){\r\n\ttransition: color 0.5s ease;\r\n\t&:hover{\r\n\t\tcolor:$color;\r\n\t}\r\n}\r\n\r\n//center element in center\r\n@mixin absolute-center{\r\n\tposition: absolute;\r\n\ttop:50%;\r\n\ttransform:translateY(-50%);\r\n}\r\n\r\n/// crée une bordure special\r\n/// @param {float} $width le width de la bordure\r\n/// @param {float} $color la couleur de la bordure\r\n@mixin special-border($width,$color){\r\n    content:'';\r\n    display: block;\r\n    width:$width;\r\n    height:2px;\r\n    background-color:$color;\r\n    margin:0 auto;\r\n}\r\n\r\n/// permet de créé un pseudo élément font awesome\r\n/// @param {string} $content le code du favicon\r\n/// @param {float} $size le font-size \r\n/// @param {float} $color couleur de la font \r\n@mixin pseudo-fontaw($content,$size:false,$color:false){\r\n\tcontent: $content;\r\n\tfont-family: \"Font Awesome 5 pro\";\r\n\t@if $size { font-size: $size; }\r\n\t@if $color {color:$color;}\r\n}\r\n\r\n\r\n/// permet de cérer une grille flex\r\n/// @param {string} $alignY l'alignement verticale\r\n/// @param {string} $alignX l'alignement horizontale\r\n@mixin flex-grid($alignY:false,$alignX:false){\r\n\tdisplay: flex;\r\n\t@if $alignY{ align-items: $alignY;}\r\n\t@if $alignX{ justify-content: $alignX;}\r\n}\r\n\r\n/// permet de gérer l'espacement Y de la section\r\n/// @param {float} $paddingTop l'alignement verticale\r\n/// @param {float} $paddingBottom l'alignement horizontale\r\n@mixin paddingY($paddingTop,$paddingBottom){\r\n\tpadding-top: $paddingTop;\r\n\tpadding-bottom: $paddingBottom;\r\n}\r\n\r\n/// Permet de position un élément en position\r\n/// @param {String} $position - Either `relative`, `absolute` or `fixed`\r\n/// @param {Length} $top  Top offset\r\n/// @param {Length} $right  Right offset\r\n/// @param {Length} $bottom  Bottom offset\r\n/// @param {Length} $left  Left offset\r\n@mixin position($position, $top: false, $left: false,$bottom: false,$right: false ) {\r\n\tposition: $position;\r\n\t@if $top{top: $top;}\r\n\t@if $right{right: $right;}\r\n\t@if $bottom{bottom: $bottom;}\r\n\t@if $left{left: $left;}\r\n  }\r\n\r\n  /// Enlève le style de list par défaut du browser\r\n @mixin custom-list(){\r\n\tlist-style: none;\r\n\tmargin: 0;\r\n\tpadding: 0;\r\n }\r\n\r\n /// set un width normal qui s'adapture mobile\r\n /// @param {float} $width le width desktop\r\n /// @param {float} $widthMobile Le width mobile\r\n @mixin responsive-width($width,$widthMobile){\r\n\t\twidth: $width;\r\n\t\t@include media-screen($bk-mobile){\r\n\t\t\twidth: $widthMobile;\r\n\t\t}\r\n }\r\n\r\n /// Défini la couleur et l'opacité du texte pour les placeholder des inputs\r\n/// @param {String} $Pcolor [default false] - Couleur du texte\r\n/// @param {Float} $opacity [default 1] - Opacité\r\n@mixin placeholderColor($Pcolor, $opacity:1){\r\n    ::-webkit-input-placeholder { /* WebKit browsers */\r\n        color:$Pcolor;\r\n        opacity:$opacity;\r\n        @content;\r\n    }\r\n    :-moz-placeholder { /* Mozilla Firefox 4 to 18 */\r\n       color:$Pcolor;\r\n       opacity:$opacity;\r\n       @content;\r\n    }\r\n    ::-moz-placeholder { /* Mozilla Firefox 19+ */\r\n       color:$Pcolor;\r\n       opacity:$opacity;\r\n       @content;\r\n    }\r\n    :-ms-input-placeholder { /* Internet Explorer 10+ */\r\n       color:$Pcolor;\r\n       opacity:$opacity;\r\n       @content;\r\n    }\r\n}"]}
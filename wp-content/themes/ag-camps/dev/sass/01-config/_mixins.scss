// centre un block
@mixin center-block {
	display: block;
	margin-left: auto;
	margin-right: auto;
}

// Ajoute le clearfix
@mixin clearfix() {
	content: "";
	display: table;
	table-layout: fixed;
}

// Clear after (not all clearfix need this also)
@mixin clearfix-after() {
	clear: both;
}

// Le width de la colonne avec la marge
@mixin column-width($numberColumns: 3) {
	width: map-get( $columns, $numberColumns ) - ( ( $columns__margin * ( $numberColumns - 1 ) ) / $numberColumns );
}


/// Retourne un media query avec la largeur donnée
/// 
/// @param {String} $width [76.8em]
/// @param {String} $minMax [min]
@mixin media-screen($width: 76.8em, $minMax: max){
	@media only screen and (#{$minMax}-width: $width) {
		@content;
	}
}


/// Permet d’appliquer un mixin au root autant que sous un autre sélecteur
/// require SASS 3.4
@mixin optional-at-root($sel) {
  @at-root #{if(not &, $sel, selector-append(&, $sel))} {
    @content;
  }
}

// Permet de styler les placeholder. Peut être 
@mixin placeholder {
  @include optional-at-root('::-webkit-input-placeholder') {
    @content;
  }

  @include optional-at-root(':-moz-placeholder') {
    @content;
  }

  @include optional-at-root('::-moz-placeholder') {
    @content;
  }

  @include optional-at-root(':-ms-input-placeholder') {
    @content;
  }
}

/// Fait en sorte que le texte ait une grosseur fluide avec la largeur de l'écran.
/// Fonctionne seulement avec la même unité (px, em)
///
///
@mixin fluid-typo($min-vw, $max-vw, $min-font-size, $max-font-size) {
  $u1: unit($min-vw);
  $u2: unit($max-vw);
  $u3: unit($min-font-size);
  $u4: unit($max-font-size);

  @if $u1 == $u2 and $u1 == $u3 and $u1 == $u4 {
    & {
      font-size: $min-font-size;

      @media screen and (min-width: $min-vw) {
        font-size: calc(#{$min-font-size} + #{strip-unit($max-font-size - $min-font-size)} * ((100vw - #{$min-vw}) / #{strip-unit($max-vw - $min-vw)}));
      }

      @media screen and (min-width: $max-vw) {
        font-size: $max-font-size;
      }
    }
  }
}

/// Retire l'unité (px, em, rem, etc.) d'une valeur.
@function strip-unit($value) {
  @return $value / ($value * 0 + 1);
}

/// Permet de définir le texte
/// @param {float} $size la taille de la police
/// @param {float} $weight le gras
/// @param {float} $color la couleur
/// @param {float} $line-height-PS le line-height valeur dans Photshop
/// @param {bool} $uppercase si true le text sera en majuscule
/// @param {float} $letter-spacing-PS le letter-spacing valeur photshop
@mixin define-text($size:false,$weight:false,$color:false,$line-height-PS:false,$uppercase:false,$letter-spacing-PS:false){
	@if $size { font-size: $size; }
	@if $weight {font-weight: $weight;}
	@if $color {color:$color;}
	@if $line-height-PS {line-height: $line-height-PS ;}
	@if $uppercase {text-transform: uppercase;}
	@if $letter-spacing-PS {letter-spacing:($letter-spacing-PS / 1000)+em;}
}

/// Applique l'équivalent de object fit responsive même sur ie
/// @param {float} $height la hauteur du figure

@mixin responsive-image-object-fit($height){
    height: $height;
    overflow: hidden;
    position: relative;
 
    img{
        width: auto;
        height: auto;
        min-width: 100%;
        min-height: 100%;
        position: absolute;
        right: 50%;
        transform: translate(50%, 0);
        max-width: none;
        left:auto;
    }
}

/// ajoute le bon line-height
/// @param {Float} $ps-line-height line height dans Photoshop
/// @param {Float} $font-size font-size en px 
@mixin line-height($ps-line-height,$font-size){
	line-height: $ps-line-height / $font-size;
}

/// ajoute le bon letter-spacing
/// @param {Float} $ps-letter-spacing line height dans Photoshop
@mixin letter-spacing($ps-letter-spacing){
	letter-spacing: ($ps-letter-spacing / 1000)+ em;
}

/// crée un overlay
/// @param {Float} $opacity opaciter de l'overlay
@mixin overlay($opacity,$default_secondary_color){
	position: relative;
	&:after{
		content:"";
		position:absolute;
		width: 100%;
		height: 100%;
		background-color:$default_secondary_color;
		opacity:$opacity;
		top:0;
		left:0;
	}
}


/// mixin pour ajouter un effet de hover
/// @param {Float} $color la couleur de hover
@mixin hover-text($color){
	transition: color 0.5s ease;
	&:hover{
		color:$color;
	}
}

//center element in center
@mixin absolute-center{
	position: absolute;
	top:50%;
	transform:translateY(-50%);
}

/// crée une bordure special
/// @param {float} $width le width de la bordure
/// @param {float} $color la couleur de la bordure
@mixin special-border($width,$color){
    content:'';
    display: block;
    width:$width;
    height:2px;
    background-color:$color;
    margin:0 auto;
}

/// permet de créé un pseudo élément font awesome
/// @param {string} $content le code du favicon
/// @param {float} $size le font-size 
/// @param {float} $color couleur de la font 
@mixin pseudo-fontaw($content,$size:false,$color:false){
	content: $content;
	font-family: "Font Awesome 5 pro";
	@if $size { font-size: $size; }
	@if $color {color:$color;}
}


/// permet de cérer une grille flex
/// @param {string} $alignY l'alignement verticale
/// @param {string} $alignX l'alignement horizontale
@mixin flex-grid($alignY:false,$alignX:false){
	display: flex;
	@if $alignY{ align-items: $alignY;}
	@if $alignX{ justify-content: $alignX;}
}

/// permet de gérer l'espacement Y de la section
/// @param {float} $paddingTop l'alignement verticale
/// @param {float} $paddingBottom l'alignement horizontale
@mixin paddingY($paddingTop,$paddingBottom){
	padding-top: $paddingTop;
	padding-bottom: $paddingBottom;
}

/// Permet de position un élément en position
/// @param {String} $position - Either `relative`, `absolute` or `fixed`
/// @param {Length} $top  Top offset
/// @param {Length} $right  Right offset
/// @param {Length} $bottom  Bottom offset
/// @param {Length} $left  Left offset
@mixin position($position, $top: false, $left: false,$bottom: false,$right: false ) {
	position: $position;
	@if $top{top: $top;}
	@if $right{right: $right;}
	@if $bottom{bottom: $bottom;}
	@if $left{left: $left;}
  }

  /// Enlève le style de list par défaut du browser
 @mixin custom-list(){
	list-style: none;
	margin: 0;
	padding: 0;
 }

 /// set un width normal qui s'adapture mobile
 /// @param {float} $width le width desktop
 /// @param {float} $widthMobile Le width mobile
 @mixin responsive-width($width,$widthMobile){
		width: $width;
		@include media-screen($bk-mobile){
			width: $widthMobile;
		}
 }

 /// Défini la couleur et l'opacité du texte pour les placeholder des inputs
/// @param {String} $Pcolor [default false] - Couleur du texte
/// @param {Float} $opacity [default 1] - Opacité
@mixin placeholderColor($Pcolor, $opacity:1){
    ::-webkit-input-placeholder { /* WebKit browsers */
        color:$Pcolor;
        opacity:$opacity;
        @content;
    }
    :-moz-placeholder { /* Mozilla Firefox 4 to 18 */
       color:$Pcolor;
       opacity:$opacity;
       @content;
    }
    ::-moz-placeholder { /* Mozilla Firefox 19+ */
       color:$Pcolor;
       opacity:$opacity;
       @content;
    }
    :-ms-input-placeholder { /* Internet Explorer 10+ */
       color:$Pcolor;
       opacity:$opacity;
       @content;
    }
}